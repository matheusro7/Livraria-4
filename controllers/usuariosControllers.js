const Usuario = require('../models/usuario');  // Importa o modelo de Usu√°rio

// Criar um novo usu√°rio
exports.criarUsuario = async (req, res) => {
  const { nome, email, telefone } = req.body;

  if (!nome || !email) {
    return res.status(400).json({
      erro: 'Campos obrigat√≥rios ausentes',
      mensagem: 'Nome e email s√£o obrigat√≥rios para cadastrar um usu√°rio.'
    });
  }

  try {
    const novoUsuario = await Usuario.criar(nome, email, telefone);

    console.log('üë§ Novo usu√°rio criado:', novoUsuario);

    res.status(201).json({
      mensagem: 'Usu√°rio criado com sucesso.',
      usuario: novoUsuario
    });
  } catch (err) {
    console.error('‚ùå Erro ao criar usu√°rio:', err.message);
    res.status(500).json({
      erro: 'Erro interno',
      mensagem: 'Ocorreu um erro ao tentar criar o usu√°rio.',
      detalhes: err.message
    });
  }
};

// Listar todos os usu√°rios
exports.listarUsuarios = async (req, res) => {
  try {
    const usuarios = await Usuario.listarTodos();

    res.status(200).json({
      mensagem: 'Lista de usu√°rios.',
      total: usuarios.length,
      usuarios: usuarios
    });
  } catch (err) {
    console.error('‚ùå Erro ao listar usu√°rios:', err.message);
    res.status(500).json({
      erro: 'Erro interno',
      mensagem: 'N√£o foi poss√≠vel listar os usu√°rios.',
      detalhes: err.message
    });
  }
};

// Atualizar um usu√°rio pelo ID

exports.atualizarUsuario = async (req, res) => {
  const { id } = req.params;
  const { nome, email, telefone } = req.body;

  if (!nome && !email && !telefone) {
    return res.status(400).json({
      erro: 'Nenhum campo informado',
      mensagem: 'Informe pelo menos um campo para atualizar.'
    });

  }

  try {
    const usuarioAtualizado = await Usuario.atualizar(id, nome, email, telefone);
    if (!usuarioAtualizado) {
      return res.status(404).json({
        erro: 'Usu√°rio n√£o encontrado',
        mensagem: `Nenhum usu√°rio com o ID ${id} foi encontrado para atualiza√ß√£o.`
      });
    }

    console.log('‚úèÔ∏è Usu√°rio atualizado:', usuarioAtualizado);

    res.status(200).json({
      mensagem: 'Usu√°rio atualizado com sucesso.',
      usuario: usuarioAtualizado
    });
  } catch (err) {
    console.error(`‚ùå Erro ao atualizar usu√°rio com ID ${id}:`, err.message);
    res.status(500).json({
      erro: 'Erro interno',
      mensagem: 'N√£o foi poss√≠vel atualizar o usu√°rio.',
      detalhes: err.message
    });
  }
};

// Excluir um usu√°rio pelo ID
exports.excluirUsuario = async (req, res) => {
  const { id } = req.params;

  try {
tus(500).json({ error: 'Erro ao excluir o usu√°rio.' });
    const usuarioAntesExclusao = await Usuario.buscarPorId?.(id); // Verifica se existe a fun√ß√£o
    const excluido = await Usuario.excluir(id);

    if (!excluido) {
      return res.status(404).json({
        erro: 'Usu√°rio n√£o encontrado',
        mensagem: `Nenhum usu√°rio com o ID ${id} foi encontrado para exclus√£o.`
      });
    }

    console.log('üóëÔ∏è Usu√°rio exclu√≠do:', usuarioAntesExclusao || { id });

    res.status(200).json({
      mensagem: `Usu√°rio com ID ${id} exclu√≠do com sucesso.`,
      usuario: usuarioAntesExclusao || { id }
    });
  } catch (err) {
    console.error(`‚ùå Erro ao excluir usu√°rio com ID ${id}:`, err.message);
    res.status(500).json({
      erro: 'Erro interno',
      mensagem: 'N√£o foi poss√≠vel excluir o usu√°rio.',
      detalhes: err.message
    });
  }
};


exports.listarLivrosDoUsuario = async (req, res) => {
  const { id } = req.params;

  try {
    const livros = await Usuario.listarLivrosDoUsuario(id);
    res.status(200).json({
      mensagem: `Livros do usu√°rio ${id}`,
      total: livros.length,
      livros
    });
  } catch (err) {
    console.error(`‚ùå Erro ao listar livros do usu√°rio ${id}:`, err.message);
    res.status(500).json({
      erro: 'Erro interno',
      mensagem: 'N√£o foi poss√≠vel listar os livros deste usu√°rio.',
      detalhes: err.message
    });
  }
};

exports.listarUsuariosComLivros = async (req, res) => {
  try {
    const usuarios = await Usuario.listarUsuariosComLivros();
    res.status(200).json({
      mensagem: 'Lista de usu√°rios com seus livros.',
      total: usuarios.length,
      usuarios
    });
  } catch (err) {
    console.error('‚ùå Erro ao listar usu√°rios com livros:', err.message);
    res.status(500).json({
      erro: 'Erro interno',
      mensagem: 'N√£o foi poss√≠vel listar os usu√°rios com livros.',
      detalhes: err.message
    });
  }
};

